"""
pybench.py: тестирует скорость одной и более версий Python
на наборе эталонных тестов в виде строк кода.
Функция runner допускает разнообразные операторы в stmts/
Сама ситема выполняется в Python 2.X и 3.X и может
порождать вывод в обеих линейках.

Используется модуль timeit для тестирования либо версии Python,
выполняющей этот сценарий, через вывод API-интерфейса, либо
набора версий Python за счет чтения порожденного вывода командной
строки (os.popen) посредством флага -m интерпретатора Python,
позволяющего находить timeit в пути поиска модулей.

Заменяет $listif3 на list в генераторах для Python 3.X и на пустую строку
для Python 2.X, заставляя Python 3.X делать ту же самую работу, что и Python 2.X.
В режиме командной строки многострочные операторы должны разделяться на
отдельные аргументы в кавычках для каждой строчки и все символы \t в отступах должны
заменяться четырьмя пробелами ради единообразия.

Предостережения: режим командной строки (только) может потерпеть неудачу, если
внутри оператора содержатся двойные кавычки, строка оператора в кавычках вообще
несовместима с командной оболочкой или командная строка превышает пределы длины
в командной оболочке платформы -- применяйте режим вызовов API-интерфейса
или любительский таймер; пока не поддерживает оператор настройки: в том виде,
как есть, время всех операторов в stmts учитывается в суммарном времени.
"""

import sys, os, timeit

defnum, defrep = 1000, 5


def runner(stmts, pythons=None, tracecmd=False):
    """
    Основная логика: запускать тесты на входных списках,режимами использования
    управляет вызывающий код.
    stmts: [(количество?, повторений?, строка-оператора)], заменяет $listif3
    в строке оператора
    pythons: None = только эта версия Python или [(версия-Python-3?,
    путь-к-исполняемому-файлу-Python
    """

    print(sys.version)
    for (number, repeat, stmt) in stmts:
        number = number or defnum
        repeat = repeat or defrep  # 0 - стандартное значение
        if not pythons:
            # Запустить оператор stmt в этой версии Python: вызов API-интерфейса
            # Нет необходимости разделять строки или помещать в кавычки
            ispy3 = sys.version[0] == '3'
            stmt = stmt.replace('$listif3', 'list' if ispy3 else '')
            best = min(timeit.repeat(stmt=stmt, number=number, repeat=repeat))
            print('%.4f [%r]' % (best, stmt[:70]))
        else:
            # Запустить оператор stmt во всех версиях Python: командная строка
            # Разделить строки на аргументы в кавычках
            print('-' * 80)
            print('[%r' % stmt)
            for (ispy3, python) in pythons:
                stmt1 = stmt.replace('$listif3', 'list' if ispy3 else '')
                stmt1 = stmt1.replace('\t', ' ' * 4)
                lines = stmt1.split('\n')
                args = ' '.join('"%s"' % line for line in lines)
                cmd = '%s -m timeit -n %s -r %s %s' % (python, number, repeat, args)
                print(python)
                if tracecmd: print(cmd)
                print('\t' + os.popen(cmd).read().rstrip())